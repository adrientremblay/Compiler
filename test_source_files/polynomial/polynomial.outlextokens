[inlinecmt, // ====== struct declarations ====== //, 0:0] 
[class, class, 2:0] [id, POLYNOMIAL, 2:5] [opencubr, {, 2:15] 
[public, public, 3:2] [function, function, 3:8] [id, evaluate, 3:16] [openpar, (, 3:25] [colon, :, 3:26] [float, float, 3:27] [returntype, =>, 3:33] [float, float, 3:35] 
[closecubr, }, 4:0] 
[class, class, 6:0] [id, LINEAR, 6:5] [isa, isa, 6:11] [id, POLYNOMIAL, 6:14] [opencubr, {, 6:24] 
[private, private, 7:2] [attribute, attribute, 7:9] [id, a, 7:18] [float, float, 7:20] 
[private, private, 8:2] [attribute, attribute, 8:9] [id, b, 8:18] [float, float, 8:20] 
[public, public, 9:2] [constructor, constructor, 9:9] [openpar, (, 9:21] [colon, :, 9:22] [float, float, 9:23] [id, B, 9:29] [float, float, 9:31] [semi, ;, 9:36] 
[public, public, 10:2] [function, function, 10:9] [id, evaluate, 10:17] [openpar, (, 10:26] [colon, :, 10:27] [float, float, 10:28] [returntype, =>, 10:34] [float, float, 10:36] 
[closecubr, }, 11:0] 
[class, class, 13:0] [id, QUADRATIC, 13:5] [isa, isa, 13:14] [id, POLYNOMIAL, 13:17] [opencubr, {, 13:27] 
[private, private, 14:2] [attribute, attribute, 14:9] [id, a, 14:18] [float, float, 14:20] 
[private, private, 15:2] [attribute, attribute, 15:9] [id, b, 15:18] [float, float, 15:20] 
[private, private, 16:2] [attribute, attribute, 16:9] [id, c, 16:18] [float, float, 16:20] 
[public, public, 17:2] [constructor, constructor, 17:9] [openpar, (, 17:21] [colon, :, 17:22] [float, float, 17:23] [id, B, 17:29] [float, float, 17:31] [id, C, 17:37] [float, float, 17:39] [semi, ;, 17:44] 
[public, public, 18:2] [function, function, 18:9] [id, evaluate, 18:17] [openpar, (, 18:26] [colon, :, 18:27] [float, float, 18:28] [returntype, =>, 18:34] [float, float, 18:36] 
[closecubr, }, 19:0] 
[inlinecmt, // ====== member function implementations ====== //  , 20:0] 
[function, function, 22:0] [id, POLYNOMIAL, 22:8] [colon, :, 22:18] [id, valuate, 22:19] [id, x, 22:26] [float, float, 22:28] [returntype, =>, 22:34] [float, float, 22:36] 
[opencubr, {, 23:0] 
[return, return, 24:2] [openpar, (, 24:8] [closepar, ), 24:9] 
[closecubr, }, 25:0] 
[function, function, 27:0] [id, QUADRATIC, 27:8] [colon, :, 27:17] [id, valuate, 27:18] [id, x, 27:25] [float, float, 27:27] [returntype, =>, 27:33] [float, float, 27:35] 
[opencubr, {, 28:0] 
[localvar, localvar, 29:2] [id, result, 29:10] [float, float, 29:17] [inlinecmt, //Using Horner's method, 29:2] 
[id, result, 31:2] [assign, =, 31:8] [id, a, 31:9] 
[id, result, 32:2] [assign, =, 32:8] [id, result, 32:9] [mult, *, 32:15] [id, x, 32:16] [plus, +, 32:17] [id, b, 32:18] 
[id, result, 33:2] [assign, =, 33:8] [id, result, 33:9] [mult, *, 33:15] [id, x, 33:16] [plus, +, 33:17] [id, c, 33:18] 
[return, return, 34:2] [openpar, (, 34:8] [id, esult, 34:9] [semi, ;, 34:14] 
[closecubr, }, 35:0] 
[function, function, 37:0] [id, QUADRATIC, 37:8] [colon, :, 37:17] [id, onstructor, 37:18] [id, A, 37:28] [float, float, 37:30] [id, B, 37:36] [float, float, 37:38] [id, C, 37:44] [float, float, 37:46] 
[opencubr, {, 38:0] 
[self, self, 39:2] [id, a, 39:6] [assign, =, 39:7] [id, A, 39:8] 
[self, self, 40:2] [id, b, 40:6] [assign, =, 40:7] [id, B, 40:8] 
[self, self, 41:2] [id, c, 41:6] [assign, =, 41:7] [id, C, 41:8] 
[closecubr, }, 42:0] 
[function, function, 44:0] [id, LINEAR, 44:8] [colon, :, 44:14] [id, onstructor, 44:15] [id, A, 44:25] [float, float, 44:27] [id, B, 44:33] [float, float, 44:35] 
[opencubr, {, 45:0] 
[self, self, 46:2] [id, a, 46:6] [assign, =, 46:7] [id, A, 46:8] 
[self, self, 47:2] [id, b, 47:6] [assign, =, 47:7] [id, B, 47:8] 
[closecubr, }, 48:0] 
[function, function, 50:0] [id, LINEAR, 50:8] [colon, :, 50:14] [id, valuate, 50:15] [id, x, 50:22] [float, float, 50:24] [returntype, =>, 50:30] [float, float, 50:32] 
[opencubr, {, 51:0] 
[localvar, localvar, 52:2] [id, result, 52:10] [float, float, 52:17] 
[id, result, 53:2] [assign, =, 53:8] [floatnum, 0.0, 53:9] 
[id, result, 54:2] [assign, =, 54:8] [id, a, 54:9] [mult, *, 54:10] [id, x, 54:11] [plus, +, 54:12] [id, b, 54:13] 
[return, return, 55:2] [openpar, (, 55:8] [id, esult, 55:9] [semi, ;, 55:14] 
[closecubr, }, 56:0] 
[inlinecmt, // ====== main ====== //, 57:0] 
[function, function, 59:0] [id, main, 59:8] [closepar, ), 59:12] [returntype, =>, 59:13] [void, void, 59:15] 
[opencubr, {, 60:0] 
[localvar, localvar, 61:2] [id, f1, 61:10] [id, LINEAR, 61:13] [intnum, 2, 61:19] [floatnum, 3.5, 61:21] [semi, ;, 61:24] 
[localvar, localvar, 62:2] [id, f2, 62:10] [id, QUADRATIC, 62:13] [minus, -, 62:22] [dot, ., 62:23] [comma, ,, 62:24] [floatnum, 1.0, 62:25] [floatnum, 0.0, 62:29] [semi, ;, 62:32] 
[localvar, localvar, 63:2] [id, counter, 63:10] [integer, integer, 63:18] [assign, =, 63:25] [intnum, 1, 63:26] 
[while, while, 65:2] [id, counter, 65:7] [leq, <=, 65:14] [intnum, 10, 65:16] 
[opencubr, {, 66:2] 
[write, write, 67:4] [id, counter, 67:9] [semi, ;, 67:16] 
[write, write, 68:4] [id, f1, 68:9] [id, evaluate, 68:11] [id, counter, 68:19] [closepar, ), 68:26] 
[write, write, 69:4] [id, f2, 69:9] [id, evaluate, 69:11] [id, counter, 69:19] [closepar, ), 69:26] 
[closecubr, }, 70:2] 
[closecubr, }, 71:0] 
[blockcmt, /*\r\n    classes\r\n    --------------------------------------\r\n| | no class declaration\r\n| | class declaration\r\n|X| multiple class declarations\r\n|X| no data member declaration\r\n|X| data member declaration\r\n|X| multiple data member declaration\r\n| | no member function declaration\r\n|X| member function declaration\r\n|X| multiple member function declaration\r\n| | no member\r\n|X| no inherited class\r\n|X| one inherited class\r\n| | multiple inherited classes\r\n|X| private member specifier\r\n|X| public member specifier\r\n\r\n    functions: definitions\r\n    --------------------------------------\r\n| | no main function definition\r\n|X| main function definition\r\n|X| no free function definition\r\n| | free function definition\r\n| | multiple free function definitions\r\n| | no member function definition\r\n|X| member function definition\r\n|X| multiple member function definitions\r\n| | return type: void\r\n| | return type: integer\r\n|X| return type: float\r\n|X| return type: id\r\n| | return type: array (not allowed)\r\n\r\n    functions: formal parameters\r\n    --------------------------------------\r\n| | type: integer\r\n|X| type: float\r\n| | type: id\r\n| | type: 1-dim array \r\n| | type: n-dim array\r\n| | type: array (with size)\r\n| | type: array (without size)\r\n\r\n    functions: calls\r\n    --------------------------------------\r\n| | free function call\r\n|X| member function call\r\n| | parameters:0\r\n|X| parameters:1\r\n|X| parameters:n\r\n| | array parameter - 1-dim\r\n| | array parameter - n-dim\r\n| | array parameter - with size\r\n| | array parameter - without size\r\n| | function call as statement\r\n|X| function call as expression factor\r\n| | expression as parameter\r\n\r\n    variable declaration\r\n    --------------------------------------\r\n| | type: integer\r\n| | type: float\r\n| | type: string\r\n|X| type: id\r\n| | type: 1-dim array \r\n| | type: n-dim array\r\n| | type: array (with size)\r\n| | type: array (without size)\r\n\r\n    function body: local variable declarations\r\n    --------------------------------------\r\n| | no local variable declarations\r\n|X| local variable declarations\r\n| | intertwined statements and variable declarations\r\n\r\n    function body: statements\r\n    --------------------------------------\r\n| | no statement\r\n| | 1 statement\r\n|X| n statements\r\n| | if statement\r\n| | if: empty then or else blocks\r\n| | if: 1-statement then or else blocks\r\n| | if: n-statements then or else blocks\r\n|X| while statement\r\n| | while: empty block\r\n| | while: 1-statement block\r\n|X| while: n-statement block\r\n| | read(<variable>) statement\r\n|X| write(<expr>) statement\r\n|X| return(<expr>) statement\r\n|X| assignment statement\r\n\r\n    variable + idnest\r\n    --------------------------------------\r\n|X| id\r\n|X| id.id\r\n|X| id.id(id)\r\n| | id(id).id\r\n| | id(id).id()\r\n| | id.id[id]\r\n| | id[id].id\r\n| | id[id].id[id]\r\n| | id.id[id][id]\r\n| | id[id][id].id\r\n| | id[id][id].id[id][id]\r\n| | id(id).id[id]\r\n| | id(id).id[id][id]\r\n| | expression as array index\r\n\r\n    expressions\r\n    --------------------------------------\r\n| | single variable\r\n| | involving addop\r\n| | involving multop\r\n| | involving relop\r\n|X| involving addop + multop\r\n| | involving multop + relop\r\n| | involving addop + multop + relop\r\n| | involving parentheses\r\n| | involving nested parenhteses\r\n| | involving not\r\n| | involving sign\r\n| | involving literals\r\n|X| involving variable + idnest\r\n|X| involving function calls\r\n| | involving all the above in one expression\r\n*, 72:0] 