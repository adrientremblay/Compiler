[inlinecmt, // ====== struct declarations ====== //, 0:0] 
[class, class, 2:0] [id, POLYNOMIAL, 2:6] [opencubr, {, 2:17] 
[public, public, 3:2] [function, function, 3:9] [id, evaluate, 3:18] [colon, :, 3:26] [openpar, (, 3:28] [id, x, 3:29] [colon, :, 3:30] [float, float, 3:32] [closepar, ), 3:37] [returntype, =>, 3:39] [float, float, 3:42] [semi, ;, 3:47] 
[closecubr, }, 4:0] [semi, ;, 4:1] 
[class, class, 6:0] [id, LINEAR, 6:6] [isa, isa, 6:13] [id, POLYNOMIAL, 6:17] [opencubr, {, 6:28] 
[private, private, 7:2] [attribute, attribute, 7:10] [id, a, 7:20] [colon, :, 7:21] [float, float, 7:23] [semi, ;, 7:28] 
[private, private, 8:2] [attribute, attribute, 8:10] [id, b, 8:20] [colon, :, 8:21] [float, float, 8:23] [semi, ;, 8:28] 
[public, public, 9:2] [constructor, constructor, 9:10] [colon, :, 9:21] [openpar, (, 9:23] [id, A, 9:24] [colon, :, 9:25] [float, float, 9:27] [comma, ,, 9:32] [id, B, 9:34] [colon, :, 9:35] [float, float, 9:37] [closepar, ), 9:42] [semi, ;, 9:43] 
[public, public, 10:2] [function, function, 10:10] [id, evaluate, 10:19] [colon, :, 10:27] [openpar, (, 10:29] [id, x, 10:30] [colon, :, 10:31] [float, float, 10:33] [closepar, ), 10:38] [returntype, =>, 10:40] [float, float, 10:43] [semi, ;, 10:48] 
[closecubr, }, 11:0] [semi, ;, 11:1] 
[class, class, 13:0] [id, QUADRATIC, 13:6] [isa, isa, 13:16] [id, POLYNOMIAL, 13:20] [opencubr, {, 13:31] 
[private, private, 14:2] [attribute, attribute, 14:10] [id, a, 14:20] [colon, :, 14:21] [float, float, 14:23] [semi, ;, 14:28] 
[private, private, 15:2] [attribute, attribute, 15:10] [id, b, 15:20] [colon, :, 15:21] [float, float, 15:23] [semi, ;, 15:28] 
[private, private, 16:2] [attribute, attribute, 16:10] [id, c, 16:20] [colon, :, 16:21] [float, float, 16:23] [semi, ;, 16:28] 
[public, public, 17:2] [constructor, constructor, 17:10] [colon, :, 17:21] [openpar, (, 17:23] [id, A, 17:24] [colon, :, 17:25] [float, float, 17:27] [comma, ,, 17:32] [id, B, 17:34] [colon, :, 17:35] [float, float, 17:37] [comma, ,, 17:42] [id, C, 17:44] [colon, :, 17:45] [float, float, 17:47] [closepar, ), 17:52] [semi, ;, 17:53] 
[public, public, 18:2] [function, function, 18:10] [id, evaluate, 18:19] [colon, :, 18:27] [openpar, (, 18:29] [id, x, 18:30] [colon, :, 18:31] [float, float, 18:33] [closepar, ), 18:38] [returntype, =>, 18:40] [float, float, 18:43] [semi, ;, 18:48] 
[closecubr, }, 19:0] [semi, ;, 19:1] 
[inlinecmt, // ====== member function implementations ====== //  , 20:0] 
[function, function, 22:0] [id, POLYNOMIAL, 22:9] [scopeop, ::, 22:19] [id, evaluate, 22:21] [openpar, (, 22:29] [id, x, 22:30] [colon, :, 22:31] [float, float, 22:33] [closepar, ), 22:38] [returntype, =>, 22:40] [float, float, 22:43] 
[opencubr, {, 23:0] 
[return, return, 24:2] [openpar, (, 24:9] [intnum, 0, 24:10] [closepar, ), 24:11] [semi, ;, 24:12] 
[closecubr, }, 25:0] 
[function, function, 27:0] [id, QUADRATIC, 27:9] [scopeop, ::, 27:18] [id, evaluate, 27:20] [openpar, (, 27:28] [id, x, 27:29] [colon, :, 27:30] [float, float, 27:32] [closepar, ), 27:37] [returntype, =>, 27:39] [float, float, 27:42] 
[opencubr, {, 28:0] 
[localvar, localvar, 29:2] [id, result, 29:11] [colon, :, 29:17] [float, float, 29:19] [semi, ;, 29:24] [inlinecmt, //Using Horner's method, 29:2] 
[id, result, 31:2] [assign, =, 31:9] [id, a, 31:11] [semi, ;, 31:12] 
[id, result, 32:2] [assign, =, 32:9] [id, result, 32:11] [mult, *, 32:18] [id, x, 32:20] [plus, +, 32:22] [id, b, 32:24] [semi, ;, 32:25] 
[id, result, 33:2] [assign, =, 33:9] [id, result, 33:11] [mult, *, 33:18] [id, x, 33:20] [plus, +, 33:22] [id, c, 33:24] [semi, ;, 33:25] 
[return, return, 34:2] [openpar, (, 34:9] [id, result, 34:10] [closepar, ), 34:16] [semi, ;, 34:17] 
[closecubr, }, 35:0] 
[function, function, 37:0] [id, QUADRATIC, 37:9] [scopeop, ::, 37:18] [constructor, constructor, 37:20] [openpar, (, 37:31] [id, A, 37:32] [colon, :, 37:33] [float, float, 37:35] [comma, ,, 37:40] [id, B, 37:42] [colon, :, 37:43] [float, float, 37:45] [comma, ,, 37:50] [id, C, 37:52] [colon, :, 37:53] [float, float, 37:55] [closepar, ), 37:60] 
[opencubr, {, 38:0] 
[self, self, 39:2] [dot, ., 39:6] [id, a, 39:7] [assign, =, 39:9] [id, A, 39:11] [semi, ;, 39:12] 
[self, self, 40:2] [dot, ., 40:6] [id, b, 40:7] [assign, =, 40:9] [id, B, 40:11] [semi, ;, 40:12] 
[self, self, 41:2] [dot, ., 41:6] [id, c, 41:7] [assign, =, 41:9] [id, C, 41:11] [semi, ;, 41:12] 
[closecubr, }, 42:0] 
[function, function, 44:0] [id, LINEAR, 44:9] [scopeop, ::, 44:15] [constructor, constructor, 44:17] [openpar, (, 44:28] [id, A, 44:29] [colon, :, 44:30] [float, float, 44:32] [comma, ,, 44:37] [id, B, 44:39] [colon, :, 44:40] [float, float, 44:42] [closepar, ), 44:47] 
[opencubr, {, 45:0] 
[self, self, 46:2] [dot, ., 46:6] [id, a, 46:7] [assign, =, 46:9] [id, A, 46:11] [semi, ;, 46:12] 
[self, self, 47:2] [dot, ., 47:6] [id, b, 47:7] [assign, =, 47:9] [id, B, 47:11] [semi, ;, 47:12] 
[closecubr, }, 48:0] 
[function, function, 50:0] [id, LINEAR, 50:9] [scopeop, ::, 50:15] [id, evaluate, 50:17] [openpar, (, 50:25] [id, x, 50:26] [colon, :, 50:27] [float, float, 50:29] [closepar, ), 50:34] [returntype, =>, 50:36] [float, float, 50:39] 
[opencubr, {, 51:0] 
[localvar, localvar, 52:2] [id, result, 52:11] [colon, :, 52:17] [float, float, 52:19] [semi, ;, 52:24] 
[id, result, 53:2] [assign, =, 53:9] [floatnum, 0.0, 53:11] [semi, ;, 53:14] 
[id, result, 54:2] [assign, =, 54:9] [id, a, 54:11] [mult, *, 54:13] [id, x, 54:15] [plus, +, 54:17] [id, b, 54:19] [semi, ;, 54:20] 
[return, return, 55:2] [openpar, (, 55:9] [id, result, 55:10] [closepar, ), 55:16] [semi, ;, 55:17] 
[closecubr, }, 56:0] 
[inlinecmt, // ====== main ====== //, 57:0] 
[function, function, 59:0] [id, main, 59:9] [openpar, (, 59:13] [closepar, ), 59:14] [returntype, =>, 59:16] [void, void, 59:19] 
[opencubr, {, 60:0] 
[localvar, localvar, 61:2] [id, f1, 61:11] [colon, :, 61:13] [id, LINEAR, 61:15] [openpar, (, 61:21] [intnum, 2, 61:22] [comma, ,, 61:23] [floatnum, 3.5, 61:25] [closepar, ), 61:28] [semi, ;, 61:29] 
[localvar, localvar, 62:2] [id, f2, 62:11] [colon, :, 62:13] [id, QUADRATIC, 62:15] [openpar, (, 62:24] [minus, -, 62:25] [floatnum, 2.0, 62:26] [comma, ,, 62:29] [floatnum, 1.0, 62:31] [comma, ,, 62:34] [floatnum, 0.0, 62:36] [closepar, ), 62:39] [semi, ;, 62:40] 
[localvar, localvar, 63:2] [id, counter, 63:11] [colon, :, 63:18] [integer, integer, 63:20] [assign, =, 63:28] [intnum, 1, 63:30] [semi, ;, 63:31] 
[while, while, 65:2] [openpar, (, 65:7] [id, counter, 65:8] [leq, <=, 65:16] [intnum, 10, 65:19] [closepar, ), 65:21] 
[opencubr, {, 66:2] 
[write, write, 67:4] [openpar, (, 67:9] [id, counter, 67:10] [closepar, ), 67:17] [semi, ;, 67:18] 
[write, write, 68:4] [openpar, (, 68:9] [id, f1, 68:10] [dot, ., 68:12] [id, evaluate, 68:13] [openpar, (, 68:21] [id, counter, 68:22] [closepar, ), 68:29] [closepar, ), 68:30] [semi, ;, 68:31] 
[write, write, 69:4] [openpar, (, 69:9] [id, f2, 69:10] [dot, ., 69:12] [id, evaluate, 69:13] [openpar, (, 69:21] [id, counter, 69:22] [closepar, ), 69:29] [closepar, ), 69:30] [semi, ;, 69:31] 
[closecubr, }, 70:2] [semi, ;, 70:3] 
[closecubr, }, 71:0] 
[blockcmt, /*\r\n    classes\r\n    --------------------------------------\r\n| | no class declaration\r\n| | class declaration\r\n|X| multiple class declarations\r\n|X| no data member declaration\r\n|X| data member declaration\r\n|X| multiple data member declaration\r\n| | no member function declaration\r\n|X| member function declaration\r\n|X| multiple member function declaration\r\n| | no member\r\n|X| no inherited class\r\n|X| one inherited class\r\n| | multiple inherited classes\r\n|X| private member specifier\r\n|X| public member specifier\r\n\r\n    functions: definitions\r\n    --------------------------------------\r\n| | no main function definition\r\n|X| main function definition\r\n|X| no free function definition\r\n| | free function definition\r\n| | multiple free function definitions\r\n| | no member function definition\r\n|X| member function definition\r\n|X| multiple member function definitions\r\n| | return type: void\r\n| | return type: integer\r\n|X| return type: float\r\n|X| return type: id\r\n| | return type: array (not allowed)\r\n\r\n    functions: formal parameters\r\n    --------------------------------------\r\n| | type: integer\r\n|X| type: float\r\n| | type: id\r\n| | type: 1-dim array \r\n| | type: n-dim array\r\n| | type: array (with size)\r\n| | type: array (without size)\r\n\r\n    functions: calls\r\n    --------------------------------------\r\n| | free function call\r\n|X| member function call\r\n| | parameters:0\r\n|X| parameters:1\r\n|X| parameters:n\r\n| | array parameter - 1-dim\r\n| | array parameter - n-dim\r\n| | array parameter - with size\r\n| | array parameter - without size\r\n| | function call as statement\r\n|X| function call as expression factor\r\n| | expression as parameter\r\n\r\n    variable declaration\r\n    --------------------------------------\r\n| | type: integer\r\n| | type: float\r\n| | type: string\r\n|X| type: id\r\n| | type: 1-dim array \r\n| | type: n-dim array\r\n| | type: array (with size)\r\n| | type: array (without size)\r\n\r\n    function body: local variable declarations\r\n    --------------------------------------\r\n| | no local variable declarations\r\n|X| local variable declarations\r\n| | intertwined statements and variable declarations\r\n\r\n    function body: statements\r\n    --------------------------------------\r\n| | no statement\r\n| | 1 statement\r\n|X| n statements\r\n| | if statement\r\n| | if: empty then or else blocks\r\n| | if: 1-statement then or else blocks\r\n| | if: n-statements then or else blocks\r\n|X| while statement\r\n| | while: empty block\r\n| | while: 1-statement block\r\n|X| while: n-statement block\r\n| | read(<variable>) statement\r\n|X| write(<expr>) statement\r\n|X| return(<expr>) statement\r\n|X| assignment statement\r\n\r\n    variable + idnest\r\n    --------------------------------------\r\n|X| id\r\n|X| id.id\r\n|X| id.id(id)\r\n| | id(id).id\r\n| | id(id).id()\r\n| | id.id[id]\r\n| | id[id].id\r\n| | id[id].id[id]\r\n| | id.id[id][id]\r\n| | id[id][id].id\r\n| | id[id][id].id[id][id]\r\n| | id(id).id[id]\r\n| | id(id).id[id][id]\r\n| | expression as array index\r\n\r\n    expressions\r\n    --------------------------------------\r\n| | single variable\r\n| | involving addop\r\n| | involving multop\r\n| | involving relop\r\n|X| involving addop + multop\r\n| | involving multop + relop\r\n| | involving addop + multop + relop\r\n| | involving parentheses\r\n| | involving nested parenhteses\r\n| | involving not\r\n| | involving sign\r\n| | involving literals\r\n|X| involving variable + idnest\r\n|X| involving function calls\r\n| | involving all the above in one expression\r\n*, 72:0] 