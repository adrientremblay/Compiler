[inlinecmt, // ====== struct declarations ====== //, 1:1] 
[class, class, 2:1] [id, POLYNOMIAL, 2:7] [opencubr, {, 2:18] 
[public, public, 3:3] [function, function, 3:10] [id, evaluate, 3:19] [colon, :, 3:27] [openpar, (, 3:29] [id, x, 3:30] [colon, :, 3:31] [float, float, 3:33] [closepar, ), 3:38] [returntype, =>, 3:40] [float, float, 3:43] [semi, ;, 3:48] 
[closecubr, }, 4:1] [semi, ;, 4:2] 
[class, class, 6:1] [id, LINEAR, 6:7] [isa, isa, 6:14] [id, POLYNOMIAL, 6:18] [opencubr, {, 6:29] 
[private, private, 7:3] [attribute, attribute, 7:11] [id, a, 7:21] [colon, :, 7:22] [float, float, 7:24] [semi, ;, 7:29] 
[private, private, 8:3] [attribute, attribute, 8:11] [id, b, 8:21] [colon, :, 8:22] [float, float, 8:24] [semi, ;, 8:29] 
[public, public, 9:3] [constructor, constructor, 9:11] [colon, :, 9:22] [openpar, (, 9:24] [id, A, 9:25] [colon, :, 9:26] [float, float, 9:28] [comma, ,, 9:33] [id, B, 9:35] [colon, :, 9:36] [float, float, 9:38] [closepar, ), 9:43] [semi, ;, 9:44] 
[public, public, 10:3] [function, function, 10:11] [id, evaluate, 10:20] [colon, :, 10:28] [openpar, (, 10:30] [id, x, 10:31] [colon, :, 10:32] [float, float, 10:34] [closepar, ), 10:39] [returntype, =>, 10:41] [float, float, 10:44] [semi, ;, 10:49] 
[closecubr, }, 11:1] [semi, ;, 11:2] 
[class, class, 13:1] [id, QUADRATIC, 13:7] [isa, isa, 13:17] [id, POLYNOMIAL, 13:21] [opencubr, {, 13:32] 
[private, private, 14:3] [attribute, attribute, 14:11] [id, a, 14:21] [colon, :, 14:22] [float, float, 14:24] [semi, ;, 14:29] 
[private, private, 15:3] [attribute, attribute, 15:11] [id, b, 15:21] [colon, :, 15:22] [float, float, 15:24] [semi, ;, 15:29] 
[private, private, 16:3] [attribute, attribute, 16:11] [id, c, 16:21] [colon, :, 16:22] [float, float, 16:24] [semi, ;, 16:29] 
[public, public, 17:3] [constructor, constructor, 17:11] [colon, :, 17:22] [openpar, (, 17:24] [id, A, 17:25] [colon, :, 17:26] [float, float, 17:28] [comma, ,, 17:33] [id, B, 17:35] [colon, :, 17:36] [float, float, 17:38] [comma, ,, 17:43] [id, C, 17:45] [colon, :, 17:46] [float, float, 17:48] [closepar, ), 17:53] [semi, ;, 17:54] 
[public, public, 18:3] [function, function, 18:11] [id, evaluate, 18:20] [colon, :, 18:28] [openpar, (, 18:30] [id, x, 18:31] [colon, :, 18:32] [float, float, 18:34] [closepar, ), 18:39] [returntype, =>, 18:41] [float, float, 18:44] [semi, ;, 18:49] 
[closecubr, }, 19:1] [semi, ;, 19:2] 
[inlinecmt, // ====== member function implementations ====== //  , 21:1] 
[function, function, 22:1] [id, POLYNOMIAL, 22:10] [scopeop, ::, 22:20] [id, evaluate, 22:22] [openpar, (, 22:30] [id, x, 22:31] [colon, :, 22:32] [float, float, 22:34] [closepar, ), 22:39] [returntype, =>, 22:41] [float, float, 22:44] 
[opencubr, {, 23:1] 
[return, return, 24:3] [openpar, (, 24:10] [intnum, 0, 24:11] [closepar, ), 24:12] [semi, ;, 24:13] 
[closecubr, }, 25:1] 
[function, function, 27:1] [id, QUADRATIC, 27:10] [scopeop, ::, 27:19] [id, evaluate, 27:21] [openpar, (, 27:29] [id, x, 27:30] [colon, :, 27:31] [float, float, 27:33] [closepar, ), 27:38] [returntype, =>, 27:40] [float, float, 27:43] 
[opencubr, {, 28:1] 
[localvar, localvar, 29:3] [id, result, 29:12] [colon, :, 29:18] [float, float, 29:20] [semi, ;, 29:25] 
[inlinecmt, //Using Horner's method, 30:3] 
[id, result, 31:3] [assign, =, 31:10] [id, a, 31:12] [semi, ;, 31:13] 
[id, result, 32:3] [assign, =, 32:10] [id, result, 32:12] [mult, *, 32:19] [id, x, 32:21] [plus, +, 32:23] [id, b, 32:25] [semi, ;, 32:26] 
[id, result, 33:3] [assign, =, 33:10] [id, result, 33:12] [mult, *, 33:19] [id, x, 33:21] [plus, +, 33:23] [id, c, 33:25] [semi, ;, 33:26] 
[return, return, 34:3] [openpar, (, 34:10] [id, result, 34:11] [closepar, ), 34:17] [semi, ;, 34:18] 
[closecubr, }, 35:1] 
[function, function, 37:1] [id, QUADRATIC, 37:10] [scopeop, ::, 37:19] [constructor, constructor, 37:21] [openpar, (, 37:32] [id, A, 37:33] [colon, :, 37:34] [float, float, 37:36] [comma, ,, 37:41] [id, B, 37:43] [colon, :, 37:44] [float, float, 37:46] [comma, ,, 37:51] [id, C, 37:53] [colon, :, 37:54] [float, float, 37:56] [closepar, ), 37:61] 
[opencubr, {, 38:1] 
[self, self, 39:3] [dot, ., 39:7] [id, a, 39:8] [assign, =, 39:10] [id, A, 39:12] [semi, ;, 39:13] 
[self, self, 40:3] [dot, ., 40:7] [id, b, 40:8] [assign, =, 40:10] [id, B, 40:12] [semi, ;, 40:13] 
[self, self, 41:3] [dot, ., 41:7] [id, c, 41:8] [assign, =, 41:10] [id, C, 41:12] [semi, ;, 41:13] 
[closecubr, }, 42:1] 
[function, function, 44:1] [id, LINEAR, 44:10] [scopeop, ::, 44:16] [constructor, constructor, 44:18] [openpar, (, 44:29] [id, A, 44:30] [colon, :, 44:31] [float, float, 44:33] [comma, ,, 44:38] [id, B, 44:40] [colon, :, 44:41] [float, float, 44:43] [closepar, ), 44:48] 
[opencubr, {, 45:1] 
[self, self, 46:3] [dot, ., 46:7] [id, a, 46:8] [assign, =, 46:10] [id, A, 46:12] [semi, ;, 46:13] 
[self, self, 47:3] [dot, ., 47:7] [id, b, 47:8] [assign, =, 47:10] [id, B, 47:12] [semi, ;, 47:13] 
[closecubr, }, 48:1] 
[function, function, 50:1] [id, LINEAR, 50:10] [scopeop, ::, 50:16] [id, evaluate, 50:18] [openpar, (, 50:26] [id, x, 50:27] [colon, :, 50:28] [float, float, 50:30] [closepar, ), 50:35] [returntype, =>, 50:37] [float, float, 50:40] 
[opencubr, {, 51:1] 
[localvar, localvar, 52:3] [id, result, 52:12] [colon, :, 52:18] [float, float, 52:20] [semi, ;, 52:25] 
[id, result, 53:3] [assign, =, 53:10] [floatnum, 0.0, 53:12] [semi, ;, 53:15] 
[id, result, 54:3] [assign, =, 54:10] [id, a, 54:12] [mult, *, 54:14] [id, x, 54:16] [plus, +, 54:18] [id, b, 54:20] [semi, ;, 54:21] 
[return, return, 55:3] [openpar, (, 55:10] [id, result, 55:11] [closepar, ), 55:17] [semi, ;, 55:18] 
[closecubr, }, 56:1] 
[inlinecmt, // ====== main ====== //, 58:1] 
[function, function, 59:1] [id, main, 59:10] [openpar, (, 59:14] [closepar, ), 59:15] [returntype, =>, 59:17] [void, void, 59:20] 
[opencubr, {, 60:1] 
[localvar, localvar, 61:3] [id, f1, 61:12] [colon, :, 61:14] [id, LINEAR, 61:16] [openpar, (, 61:22] [intnum, 2, 61:23] [comma, ,, 61:24] [floatnum, 3.5, 61:26] [closepar, ), 61:29] [semi, ;, 61:30] 
[localvar, localvar, 62:3] [id, f2, 62:12] [colon, :, 62:14] [id, QUADRATIC, 62:16] [openpar, (, 62:25] [minus, -, 62:26] [floatnum, 2.0, 62:27] [comma, ,, 62:30] [floatnum, 1.0, 62:32] [comma, ,, 62:35] [floatnum, 0.0, 62:37] [closepar, ), 62:40] [semi, ;, 62:41] 
[localvar, localvar, 63:3] [id, counter, 63:12] [colon, :, 63:19] [integer, integer, 63:21] [assign, =, 63:29] [intnum, 1, 63:31] [semi, ;, 63:32] 
[while, while, 65:3] [openpar, (, 65:8] [id, counter, 65:9] [leq, <=, 65:17] [intnum, 10, 65:20] [closepar, ), 65:22] 
[opencubr, {, 66:3] 
[write, write, 67:5] [openpar, (, 67:10] [id, counter, 67:11] [closepar, ), 67:18] [semi, ;, 67:19] 
[write, write, 68:5] [openpar, (, 68:10] [id, f1, 68:11] [dot, ., 68:13] [id, evaluate, 68:14] [openpar, (, 68:22] [id, counter, 68:23] [closepar, ), 68:30] [closepar, ), 68:31] [semi, ;, 68:32] 
[write, write, 69:5] [openpar, (, 69:10] [id, f2, 69:11] [dot, ., 69:13] [id, evaluate, 69:14] [openpar, (, 69:22] [id, counter, 69:23] [closepar, ), 69:30] [closepar, ), 69:31] [semi, ;, 69:32] 
[closecubr, }, 70:3] [semi, ;, 70:4] 
[closecubr, }, 71:1] 
[blockcmt, /*\r\n    classes\r\n    --------------------------------------\r\n| | no class declaration\r\n| | class declaration\r\n|X| multiple class declarations\r\n|X| no data member declaration\r\n|X| data member declaration\r\n|X| multiple data member declaration\r\n| | no member function declaration\r\n|X| member function declaration\r\n|X| multiple member function declaration\r\n| | no member\r\n|X| no inherited class\r\n|X| one inherited class\r\n| | multiple inherited classes\r\n|X| private member specifier\r\n|X| public member specifier\r\n\r\n    functions: definitions\r\n    --------------------------------------\r\n| | no main function definition\r\n|X| main function definition\r\n|X| no free function definition\r\n| | free function definition\r\n| | multiple free function definitions\r\n| | no member function definition\r\n|X| member function definition\r\n|X| multiple member function definitions\r\n| | return type: void\r\n| | return type: integer\r\n|X| return type: float\r\n|X| return type: id\r\n| | return type: array (not allowed)\r\n\r\n    functions: formal parameters\r\n    --------------------------------------\r\n| | type: integer\r\n|X| type: float\r\n| | type: id\r\n| | type: 1-dim array \r\n| | type: n-dim array\r\n| | type: array (with size)\r\n| | type: array (without size)\r\n\r\n    functions: calls\r\n    --------------------------------------\r\n| | free function call\r\n|X| member function call\r\n| | parameters:0\r\n|X| parameters:1\r\n|X| parameters:n\r\n| | array parameter - 1-dim\r\n| | array parameter - n-dim\r\n| | array parameter - with size\r\n| | array parameter - without size\r\n| | function call as statement\r\n|X| function call as expression factor\r\n| | expression as parameter\r\n\r\n    variable declaration\r\n    --------------------------------------\r\n| | type: integer\r\n| | type: float\r\n| | type: string\r\n|X| type: id\r\n| | type: 1-dim array \r\n| | type: n-dim array\r\n| | type: array (with size)\r\n| | type: array (without size)\r\n\r\n    function body: local variable declarations\r\n    --------------------------------------\r\n| | no local variable declarations\r\n|X| local variable declarations\r\n| | intertwined statements and variable declarations\r\n\r\n    function body: statements\r\n    --------------------------------------\r\n| | no statement\r\n| | 1 statement\r\n|X| n statements\r\n| | if statement\r\n| | if: empty then or else blocks\r\n| | if: 1-statement then or else blocks\r\n| | if: n-statements then or else blocks\r\n|X| while statement\r\n| | while: empty block\r\n| | while: 1-statement block\r\n|X| while: n-statement block\r\n| | read(<variable>) statement\r\n|X| write(<expr>) statement\r\n|X| return(<expr>) statement\r\n|X| assignment statement\r\n\r\n    variable + idnest\r\n    --------------------------------------\r\n|X| id\r\n|X| id.id\r\n|X| id.id(id)\r\n| | id(id).id\r\n| | id(id).id()\r\n| | id.id[id]\r\n| | id[id].id\r\n| | id[id].id[id]\r\n| | id.id[id][id]\r\n| | id[id][id].id\r\n| | id[id][id].id[id][id]\r\n| | id(id).id[id]\r\n| | id(id).id[id][id]\r\n| | expression as array index\r\n\r\n    expressions\r\n    --------------------------------------\r\n| | single variable\r\n| | involving addop\r\n| | involving multop\r\n| | involving relop\r\n|X| involving addop + multop\r\n| | involving multop + relop\r\n| | involving addop + multop + relop\r\n| | involving parentheses\r\n| | involving nested parenhteses\r\n| | involving not\r\n| | involving sign\r\n| | involving literals\r\n|X| involving variable + idnest\r\n|X| involving function calls\r\n| | involving all the above in one expression\r\n*, 72:1] 