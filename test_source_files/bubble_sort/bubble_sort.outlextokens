[blockcmt, /* sort the array *, 1:1] 
[function, function, 2:1] [id, bubbleSort, 2:10] [openpar, (, 2:20] [id, arr, 2:21] [colon, :, 2:24] [integer, integer, 2:26] [opensqbr, [, 2:33] [closesqbr, ], 2:34] [comma, ,, 2:35] [id, size, 2:37] [colon, :, 2:41] [integer, integer, 2:43] [closepar, ), 2:50] [returntype, =>, 2:52] [void, void, 2:55] 
[opencubr, {, 3:1] 
[localvar, localvar, 4:3] [id, n, 4:12] [colon, :, 4:17] [integer, integer, 4:19] [semi, ;, 4:26] 
[localvar, localvar, 5:3] [id, i, 5:12] [colon, :, 5:17] [integer, integer, 5:19] [semi, ;, 5:26] 
[localvar, localvar, 6:3] [id, j, 6:12] [colon, :, 6:17] [integer, integer, 6:19] [semi, ;, 6:26] 
[localvar, localvar, 7:3] [id, temp, 7:12] [colon, :, 7:17] [integer, integer, 7:19] [semi, ;, 7:26] 
[id, n, 8:3] [assign, =, 8:5] [id, size, 8:7] [semi, ;, 8:11] 
[id, i, 9:3] [assign, =, 9:5] [intnum, 0, 9:7] [semi, ;, 9:8] 
[id, j, 10:3] [assign, =, 10:5] [intnum, 0, 10:7] [semi, ;, 10:8] 
[id, temp, 11:3] [assign, =, 11:8] [intnum, 0, 11:10] [semi, ;, 11:11] 
[while, while, 12:3] [openpar, (, 12:9] [id, i, 12:10] [lt, <, 12:12] [id, n, 12:14] [minus, -, 12:15] [intnum, 1, 12:16] [closepar, ), 12:17] [opencubr, {, 12:19] 
[while, while, 13:5] [openpar, (, 13:11] [id, j, 13:12] [lt, <, 13:14] [id, n, 13:16] [minus, -, 13:17] [id, i, 13:18] [minus, -, 13:19] [intnum, 1, 13:20] [closepar, ), 13:21] [opencubr, {, 13:23] 
[if, if, 14:7] [openpar, (, 14:10] [id, arr, 14:11] [opensqbr, [, 14:14] [id, j, 14:15] [closesqbr, ], 14:16] [gt, >, 14:18] [id, arr, 14:20] [opensqbr, [, 14:23] [id, j, 14:24] [plus, +, 14:25] [intnum, 1, 14:26] [closesqbr, ], 14:27] [closepar, ), 14:28] 
[then, then, 15:9] [opencubr, {, 15:14] 
[inlinecmt, // swap temp and arr[i], 16:11] 
[id, temp, 17:11] [assign, =, 17:16] [id, arr, 17:18] [opensqbr, [, 17:21] [id, j, 17:22] [closesqbr, ], 17:23] [semi, ;, 17:24] 
[id, arr, 18:11] [opensqbr, [, 18:14] [id, j, 18:15] [closesqbr, ], 18:16] [assign, =, 18:18] [id, arr, 18:20] [opensqbr, [, 18:23] [id, j, 18:24] [plus, +, 18:25] [intnum, 1, 18:26] [closesqbr, ], 18:27] [semi, ;, 18:28] 
[id, arr, 19:11] [opensqbr, [, 19:14] [id, j, 19:15] [plus, +, 19:16] [intnum, 1, 19:17] [closesqbr, ], 19:18] [assign, =, 19:20] [id, temp, 19:22] [semi, ;, 19:26] 
[closecubr, }, 20:9] [else, else, 20:11] [semi, ;, 20:16] 
[id, j, 21:9] [assign, =, 21:11] [id, j, 21:13] [plus, +, 21:14] [intnum, 1, 21:15] [semi, ;, 21:16] 
[closecubr, }, 22:7] [semi, ;, 22:8] 
[id, i, 23:5] [assign, =, 23:7] [id, i, 23:9] [plus, +, 23:10] [intnum, 1, 23:11] [semi, ;, 23:12] 
[closecubr, }, 24:3] [semi, ;, 24:4] 
[closecubr, }, 25:1] 
[blockcmt, /* print the array *, 27:1] 
[function, function, 28:1] [id, printArray, 28:10] [openpar, (, 28:20] [id, arr, 28:21] [colon, :, 28:24] [integer, integer, 28:26] [opensqbr, [, 28:33] [closesqbr, ], 28:34] [comma, ,, 28:35] [id, size, 28:37] [colon, :, 28:41] [integer, integer, 28:43] [closepar, ), 28:50] [returntype, =>, 28:52] [void, void, 28:55] 
[opencubr, {, 29:1] 
[localvar, localvar, 30:3] [id, n, 30:12] [colon, :, 30:13] [integer, integer, 30:15] [semi, ;, 30:22] 
[localvar, localvar, 31:3] [id, i, 31:12] [colon, :, 31:13] [integer, integer, 31:15] [semi, ;, 31:22] 
[id, n, 32:3] [assign, =, 32:5] [id, size, 32:7] [semi, ;, 32:11] 
[id, i, 33:3] [assign, =, 33:5] [intnum, 0, 33:7] [semi, ;, 33:8] 
[while, while, 34:3] [openpar, (, 34:9] [id, i, 34:10] [lt, <, 34:11] [id, n, 34:12] [closepar, ), 34:13] [opencubr, {, 34:15] 
[write, write, 35:5] [openpar, (, 35:10] [id, arr, 35:11] [opensqbr, [, 35:14] [id, i, 35:15] [closesqbr, ], 35:16] [closepar, ), 35:17] [semi, ;, 35:18] 
[id, i, 36:7] [assign, =, 36:9] [id, i, 36:11] [plus, +, 36:12] [intnum, 1, 36:13] [semi, ;, 36:14] 
[closecubr, }, 37:3] [semi, ;, 37:4] 
[closecubr, }, 38:1] 
[inlinecmt, // main funtion to test above, 40:1] 
[function, function, 41:1] [id, main, 41:10] [openpar, (, 41:14] [closepar, ), 41:15] [returntype, =>, 41:17] [void, void, 41:20] 
[opencubr, {, 42:1] 
[localvar, localvar, 43:3] [id, arr, 43:12] [colon, :, 43:15] [integer, integer, 43:17] [opensqbr, [, 43:24] [intnum, 7, 43:25] [closesqbr, ], 43:26] [semi, ;, 43:27] 
[id, arr, 44:3] [opensqbr, [, 44:6] [intnum, 0, 44:7] [closesqbr, ], 44:8] [assign, =, 44:10] [intnum, 64, 44:12] [semi, ;, 44:14] 
[id, arr, 45:3] [opensqbr, [, 45:6] [intnum, 1, 45:7] [closesqbr, ], 45:8] [assign, =, 45:10] [intnum, 34, 45:12] [semi, ;, 45:14] 
[id, arr, 46:3] [opensqbr, [, 46:6] [intnum, 2, 46:7] [closesqbr, ], 46:8] [assign, =, 46:10] [intnum, 25, 46:12] [semi, ;, 46:14] 
[id, arr, 47:3] [opensqbr, [, 47:6] [intnum, 3, 47:7] [closesqbr, ], 47:8] [assign, =, 47:10] [intnum, 12, 47:12] [semi, ;, 47:14] 
[id, arr, 48:3] [opensqbr, [, 48:6] [intnum, 4, 48:7] [closesqbr, ], 48:8] [assign, =, 48:10] [intnum, 22, 48:12] [semi, ;, 48:14] 
[id, arr, 49:3] [opensqbr, [, 49:6] [intnum, 5, 49:7] [closesqbr, ], 49:8] [assign, =, 49:10] [intnum, 11, 49:12] [semi, ;, 49:14] 
[id, arr, 50:3] [opensqbr, [, 50:6] [intnum, 6, 50:7] [closesqbr, ], 50:8] [assign, =, 50:10] [intnum, 90, 50:12] [semi, ;, 50:14] 
[id, printarray, 51:3] [openpar, (, 51:13] [id, arr, 51:14] [comma, ,, 51:17] [intnum, 7, 51:19] [closepar, ), 51:20] [semi, ;, 51:21] 
[id, bubbleSort, 52:3] [openpar, (, 52:13] [id, arr, 52:14] [comma, ,, 52:17] [intnum, 7, 52:19] [closepar, ), 52:20] [semi, ;, 52:21] 
[id, printarray, 53:3] [openpar, (, 53:13] [id, arr, 53:14] [comma, ,, 53:17] [intnum, 7, 53:19] [closepar, ), 53:20] [semi, ;, 53:21] 
[closecubr, }, 54:1] 
[blockcmt, /*\n    classes\n    --------------------------------------\n|X| no class declaration\n| | class declaration\n| | multiple class declarations\n| | no data member declaration\n| | data member declaration\n| | multiple data member declaration\n| | no member function declaration\n| | member function declaration\n| | multiple member function declaration\n| | no member\n| | no inherited class\n| | one inherited class\n| | multiple inherited classes\n| | private member specifier\n| | public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n| | no free function definition\n|X| free function definition\n|X| multiple free function definitions\n|X| no member function definition\n| | member function definition\n| | multiple member function definitions\n|X| return type: void\n| | return type: integer\n| | return type: float\n| | return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n|X| type: integer\n| | type: float\n| | type: id\n|X| type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n|X| type: array (without size)\n\n    functions: calls\n    --------------------------------------\n|X| free function call\n| | member function call\n| | parameters:0\n| | parameters:1\n|X| parameters:n\n|X| array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n| | function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n|X| type: integer\n| | type: float\n| | type: string\n| | type: id\n|X| type: 1-dim array \n| | type: n-dim array\n|X| type: array (with size)\n| | type: array (without size) (not allowed)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n|X| if statement\n|X| if: empty then or else blocks\n| | if: 1-statement then or else blocks\n|X| if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n| | id.id\n| | id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n|X| single variable\n|X| involving addop\n| | involving multop\n|X| involving relop\n| | involving addop + multop\n|X| involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parentheses\n| | involving not\n| | involving sign\n|X| involving literals\n| | involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*, 56:1] 