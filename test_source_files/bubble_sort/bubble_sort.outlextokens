[blockcmt, /* sort the array *, 1:0] 
[function, function, 2:0] [id, bubbleSort, 2:9] [openpar, (, 2:19] [id, arr, 2:20] [colon, :, 2:23] [integer, integer, 2:25] [opensqbr, [, 2:32] [closesqbr, ], 2:33] [comma, ,, 2:34] [id, size, 2:36] [colon, :, 2:40] [integer, integer, 2:42] [closepar, ), 2:49] [returntype, =>, 2:51] [void, void, 2:54] 
[opencubr, {, 3:0] 
[localvar, localvar, 4:2] [id, n, 4:11] [colon, :, 4:16] [integer, integer, 4:18] [semi, ;, 4:25] 
[localvar, localvar, 5:2] [id, i, 5:11] [colon, :, 5:16] [integer, integer, 5:18] [semi, ;, 5:25] 
[localvar, localvar, 6:2] [id, j, 6:11] [colon, :, 6:16] [integer, integer, 6:18] [semi, ;, 6:25] 
[localvar, localvar, 7:2] [id, temp, 7:11] [colon, :, 7:16] [integer, integer, 7:18] [semi, ;, 7:25] 
[id, n, 8:2] [assign, =, 8:4] [id, size, 8:6] [semi, ;, 8:10] 
[id, i, 9:2] [assign, =, 9:4] [intnum, 0, 9:6] [semi, ;, 9:7] 
[id, j, 10:2] [assign, =, 10:4] [intnum, 0, 10:6] [semi, ;, 10:7] 
[id, temp, 11:2] [assign, =, 11:7] [intnum, 0, 11:9] [semi, ;, 11:10] 
[while, while, 12:2] [openpar, (, 12:8] [id, i, 12:9] [lt, <, 12:11] [id, n, 12:13] [minus, -, 12:14] [intnum, 1, 12:15] [closepar, ), 12:16] [opencubr, {, 12:18] 
[while, while, 13:4] [openpar, (, 13:10] [id, j, 13:11] [lt, <, 13:13] [id, n, 13:15] [minus, -, 13:16] [id, i, 13:17] [minus, -, 13:18] [intnum, 1, 13:19] [closepar, ), 13:20] [opencubr, {, 13:22] 
[if, if, 14:6] [openpar, (, 14:9] [id, arr, 14:10] [opensqbr, [, 14:13] [id, j, 14:14] [closesqbr, ], 14:15] [gt, >, 14:17] [id, arr, 14:19] [opensqbr, [, 14:22] [id, j, 14:23] [plus, +, 14:24] [intnum, 1, 14:25] [closesqbr, ], 14:26] [closepar, ), 14:27] 
[then, then, 15:8] [opencubr, {, 15:13] [inlinecmt, // swap temp and arr[i, 15:10] 
[id, temp, 17:10] [assign, =, 17:15] [id, arr, 17:17] [opensqbr, [, 17:20] [id, j, 17:21] [closesqbr, ], 17:22] [semi, ;, 17:23] 
[id, arr, 18:10] [opensqbr, [, 18:13] [id, j, 18:14] [closesqbr, ], 18:15] [assign, =, 18:17] [id, arr, 18:19] [opensqbr, [, 18:22] [id, j, 18:23] [plus, +, 18:24] [intnum, 1, 18:25] [closesqbr, ], 18:26] [semi, ;, 18:27] 
[id, arr, 19:10] [opensqbr, [, 19:13] [id, j, 19:14] [plus, +, 19:15] [intnum, 1, 19:16] [closesqbr, ], 19:17] [assign, =, 19:19] [id, temp, 19:21] [semi, ;, 19:25] 
[closecubr, }, 20:8] [else, else, 20:10] [semi, ;, 20:15] 
[id, j, 21:8] [assign, =, 21:10] [id, j, 21:12] [plus, +, 21:13] [intnum, 1, 21:14] [semi, ;, 21:15] 
[closecubr, }, 22:6] [semi, ;, 22:7] 
[id, i, 23:4] [assign, =, 23:6] [id, i, 23:8] [plus, +, 23:9] [intnum, 1, 23:10] [semi, ;, 23:11] 
[closecubr, }, 24:2] [semi, ;, 24:3] 
[closecubr, }, 25:0] 
[blockcmt, /* print the array *, 27:0] 
[function, function, 28:0] [id, printArray, 28:9] [openpar, (, 28:19] [id, arr, 28:20] [colon, :, 28:23] [integer, integer, 28:25] [opensqbr, [, 28:32] [closesqbr, ], 28:33] [comma, ,, 28:34] [id, size, 28:36] [colon, :, 28:40] [integer, integer, 28:42] [closepar, ), 28:49] [returntype, =>, 28:51] [void, void, 28:54] 
[opencubr, {, 29:0] 
[localvar, localvar, 30:2] [id, n, 30:11] [colon, :, 30:12] [integer, integer, 30:14] [semi, ;, 30:21] 
[localvar, localvar, 31:2] [id, i, 31:11] [colon, :, 31:12] [integer, integer, 31:14] [semi, ;, 31:21] 
[id, n, 32:2] [assign, =, 32:4] [id, size, 32:6] [semi, ;, 32:10] 
[id, i, 33:2] [assign, =, 33:4] [intnum, 0, 33:6] [semi, ;, 33:7] 
[while, while, 34:2] [openpar, (, 34:8] [id, i, 34:9] [lt, <, 34:10] [id, n, 34:11] [closepar, ), 34:12] [opencubr, {, 34:14] 
[write, write, 35:4] [openpar, (, 35:9] [id, arr, 35:10] [opensqbr, [, 35:13] [id, i, 35:14] [closesqbr, ], 35:15] [closepar, ), 35:16] [semi, ;, 35:17] 
[id, i, 36:6] [assign, =, 36:8] [id, i, 36:10] [plus, +, 36:11] [intnum, 1, 36:12] [semi, ;, 36:13] 
[closecubr, }, 37:2] [semi, ;, 37:3] 
[closecubr, }, 38:0] 
[inlinecmt, // main funtion to test abov, 39:0] 
[function, function, 41:0] [id, main, 41:9] [openpar, (, 41:13] [closepar, ), 41:14] [returntype, =>, 41:16] [void, void, 41:19] 
[opencubr, {, 42:0] 
[localvar, localvar, 43:2] [id, arr, 43:11] [colon, :, 43:14] [integer, integer, 43:16] [opensqbr, [, 43:23] [intnum, 7, 43:24] [closesqbr, ], 43:25] [semi, ;, 43:26] 
[id, arr, 44:2] [opensqbr, [, 44:5] [intnum, 0, 44:6] [closesqbr, ], 44:7] [assign, =, 44:9] [intnum, 64, 44:11] [semi, ;, 44:13] 
[id, arr, 45:2] [opensqbr, [, 45:5] [intnum, 1, 45:6] [closesqbr, ], 45:7] [assign, =, 45:9] [intnum, 34, 45:11] [semi, ;, 45:13] 
[id, arr, 46:2] [opensqbr, [, 46:5] [intnum, 2, 46:6] [closesqbr, ], 46:7] [assign, =, 46:9] [intnum, 25, 46:11] [semi, ;, 46:13] 
[id, arr, 47:2] [opensqbr, [, 47:5] [intnum, 3, 47:6] [closesqbr, ], 47:7] [assign, =, 47:9] [intnum, 12, 47:11] [semi, ;, 47:13] 
[id, arr, 48:2] [opensqbr, [, 48:5] [intnum, 4, 48:6] [closesqbr, ], 48:7] [assign, =, 48:9] [intnum, 22, 48:11] [semi, ;, 48:13] 
[id, arr, 49:2] [opensqbr, [, 49:5] [intnum, 5, 49:6] [closesqbr, ], 49:7] [assign, =, 49:9] [intnum, 11, 49:11] [semi, ;, 49:13] 
[id, arr, 50:2] [opensqbr, [, 50:5] [intnum, 6, 50:6] [closesqbr, ], 50:7] [assign, =, 50:9] [intnum, 90, 50:11] [semi, ;, 50:13] 
[id, printarray, 51:2] [openpar, (, 51:12] [id, arr, 51:13] [comma, ,, 51:16] [intnum, 7, 51:18] [closepar, ), 51:19] [semi, ;, 51:20] 
[id, bubbleSort, 52:2] [openpar, (, 52:12] [id, arr, 52:13] [comma, ,, 52:16] [intnum, 7, 52:18] [closepar, ), 52:19] [semi, ;, 52:20] 
[id, printarray, 53:2] [openpar, (, 53:12] [id, arr, 53:13] [comma, ,, 53:16] [intnum, 7, 53:18] [closepar, ), 53:19] [semi, ;, 53:20] 
[closecubr, }, 54:0] 
[blockcmt, /*\n    classes\n    --------------------------------------\n|X| no class declaration\n| | class declaration\n| | multiple class declarations\n| | no data member declaration\n| | data member declaration\n| | multiple data member declaration\n| | no member function declaration\n| | member function declaration\n| | multiple member function declaration\n| | no member\n| | no inherited class\n| | one inherited class\n| | multiple inherited classes\n| | private member specifier\n| | public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n| | no free function definition\n|X| free function definition\n|X| multiple free function definitions\n|X| no member function definition\n| | member function definition\n| | multiple member function definitions\n|X| return type: void\n| | return type: integer\n| | return type: float\n| | return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n|X| type: integer\n| | type: float\n| | type: id\n|X| type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n|X| type: array (without size)\n\n    functions: calls\n    --------------------------------------\n|X| free function call\n| | member function call\n| | parameters:0\n| | parameters:1\n|X| parameters:n\n|X| array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n| | function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n|X| type: integer\n| | type: float\n| | type: string\n| | type: id\n|X| type: 1-dim array \n| | type: n-dim array\n|X| type: array (with size)\n| | type: array (without size) (not allowed)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n|X| if statement\n|X| if: empty then or else blocks\n| | if: 1-statement then or else blocks\n|X| if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n| | id.id\n| | id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n|X| single variable\n|X| involving addop\n| | involving multop\n|X| involving relop\n| | involving addop + multop\n|X| involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parentheses\n| | involving not\n| | involving sign\n|X| involving literals\n| | involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*, 56:0] 