[blockcmt, /* sort the array *, 1:0] 
[function, function, 2:0] [id, bubbleSort, 2:8] [id, arr, 2:18] [integer, integer, 2:22] [closesqbr, ], 2:29] [id, size, 2:31] [integer, integer, 2:36] [returntype, =>, 2:44] [void, void, 2:46] 
[opencubr, {, 3:0] [localvar, localvar, 3:3] [id, n, 3:11] [colon, :, 3:15] [integer, integer, 3:16] 
[localvar, localvar, 4:2] [id, i, 4:10] [colon, :, 4:14] [integer, integer, 4:15] 
[localvar, localvar, 5:2] [id, j, 5:10] [colon, :, 5:14] [integer, integer, 5:15] 
[localvar, localvar, 6:2] [id, temp, 6:10] [colon, :, 6:14] [integer, integer, 6:15] 
[id, n, 7:2] [assign, =, 7:3] [id, size, 7:4] 
[id, i, 8:2] [assign, =, 8:3] [intnum, 0, 8:4] 
[id, j, 9:2] [assign, =, 9:3] [intnum, 0, 9:4] 
[id, temp, 10:2] [assign, =, 10:6] [intnum, 0, 10:7] 
[while, while, 11:2] [openpar, (, 11:7] [lt, <, 11:9] [id, n, 11:10] [intnum, 1, 11:11] [opencubr, {, 11:13] 
[while, while, 12:4] [openpar, (, 12:9] [lt, <, 12:11] [id, n, 12:12] [id, i, 12:13] [intnum, 1, 12:14] [opencubr, {, 12:16] [if, if, 12:23] [openpar, (, 12:25] [id, rr, 12:26] [id, j, 12:28] [gt, >, 12:30] [id, arr, 12:31] [id, j, 12:34] [intnum, 1, 12:35] [closepar, ), 12:36] 
[then, then, 13:8] [opencubr, {, 13:12] [inlinecmt, // swap temp and arr[i, 12:23] 
[id, temp, 14:10] [assign, =, 14:14] [id, arr, 14:15] [id, j, 14:18] [semi, ;, 14:19] [id, arr, 14:30] [id, j, 14:33] [assign, =, 14:35] [id, arr, 14:36] [id, j, 14:39] [intnum, 1, 14:40] [semi, ;, 14:41] [id, arr, 14:52] [id, j, 14:55] [intnum, 1, 14:56] [assign, =, 14:58] [id, temp, 14:59] 
[closecubr, }, 15:8] [else, else, 15:9] [semi, ;, 15:13] [id, j, 15:22] [assign, =, 15:23] [id, j, 15:24] [intnum, 1, 15:25] 
[closecubr, }, 16:6] 
[id, i, 17:4] [assign, =, 17:5] [id, i, 17:6] [intnum, 1, 17:7] 
[closecubr, }, 18:2] 
[closecubr, }, 19:0] 
[blockcmt, /* print the array *, 20:0] 
[function, function, 21:0] [id, printArray, 21:8] [id, arr, 21:18] [integer, integer, 21:22] [closesqbr, ], 21:29] [id, size, 21:31] [integer, integer, 21:36] [returntype, =>, 21:44] [void, void, 21:46] 
[opencubr, {, 22:0] [localvar, localvar, 22:3] [id, n, 22:11] [integer, integer, 22:13] 
[localvar, localvar, 23:2] [id, i, 23:10] [integer, integer, 23:12] 
[id, n, 24:2] [assign, =, 24:3] [id, size, 24:4] 
[id, i, 25:2] [assign, =, 25:3] [intnum, 0, 25:4] 
[while, while, 26:2] [openpar, (, 26:7] [lt, <, 26:8] [closepar, ), 26:9] [opencubr, {, 26:10] 
[write, write, 27:4] [id, arr, 27:9] [id, i, 27:12] [closepar, ), 27:13] 
[id, i, 28:6] [assign, =, 28:7] [id, i, 28:8] [intnum, 1, 28:9] 
[closecubr, }, 29:2] 
[closecubr, }, 30:0] 
[inlinecmt, // main funtion to test abov, 31:0] 
[function, function, 33:0] [id, main, 33:8] [closepar, ), 33:12] [returntype, =>, 33:13] [void, void, 33:15] [opencubr, {, 33:19] [localvar, localvar, 33:22] [id, arr, 33:30] [integer, integer, 33:34] [intnum, 7, 33:41] [semi, ;, 33:42] 
[id, arr, 34:2] [intnum, 0, 34:5] [assign, =, 34:7] [intnum, 64, 34:8] 
[id, arr, 35:2] [intnum, 1, 35:5] [assign, =, 35:7] [intnum, 34, 35:8] 
[id, arr, 36:2] [intnum, 2, 36:5] [assign, =, 36:7] [intnum, 25, 36:8] 
[id, arr, 37:2] [intnum, 3, 37:5] [assign, =, 37:7] [intnum, 12, 37:8] 
[id, arr, 38:2] [intnum, 4, 38:5] [assign, =, 38:7] [intnum, 22, 38:8] 
[id, arr, 39:2] [intnum, 5, 39:5] [assign, =, 39:7] [intnum, 11, 39:8] 
[id, arr, 40:2] [intnum, 6, 40:5] [assign, =, 40:7] [intnum, 90, 40:8] 
[id, printarray, 41:2] [id, arr, 41:12] [intnum, 7, 41:16] [semi, ;, 41:17] 
[id, bubbleSort, 42:2] [id, arr, 42:12] [intnum, 7, 42:16] [semi, ;, 42:17] [id, printarray, 42:20] [id, arr, 42:30] [intnum, 7, 42:34] [semi, ;, 42:35] 
[closecubr, }, 43:0] 
[blockcmt, /*\n    classes\n    --------------------------------------\n|X| no class declaration\n| | class declaration\n| | multiple class declarations\n| | no data member declaration\n| | data member declaration\n| | multiple data member declaration\n| | no member function declaration\n| | member function declaration\n| | multiple member function declaration\n| | no member\n| | no inherited class\n| | one inherited class\n| | multiple inherited classes\n| | private member specifier\n| | public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n| | no free function definition\n|X| free function definition\n|X| multiple free function definitions\n|X| no member function definition\n| | member function definition\n| | multiple member function definitions\n|X| return type: void\n| | return type: integer\n| | return type: float\n| | return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n|X| type: integer\n| | type: float\n| | type: id\n|X| type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n|X| type: array (without size)\n\n    functions: calls\n    --------------------------------------\n|X| free function call\n| | member function call\n| | parameters:0\n| | parameters:1\n|X| parameters:n\n|X| array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n| | function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n|X| type: integer\n| | type: float\n| | type: string\n| | type: id\n|X| type: 1-dim array \n| | type: n-dim array\n|X| type: array (with size)\n| | type: array (without size) (not allowed)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n|X| if statement\n|X| if: empty then or else blocks\n| | if: 1-statement then or else blocks\n|X| if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n| | id.id\n| | id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n|X| single variable\n|X| involving addop\n| | involving multop\n|X| involving relop\n| | involving addop + multop\n|X| involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parentheses\n| | involving not\n| | involving sign\n|X| involving literals\n| | involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*, 44:0] 